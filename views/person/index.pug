extends ../layout
block content
    h3=`${title} collection`
    a#newButton.waves-effect.waves-light.btn.green
        i.material-icons add
    table.highlight
        thead
            tr
                th Name
                th Last Name
                th Birthday
                th Actions
        tbody#table
            each person in people
                include ./row
    #modal.modal
        .modal-content
            h4#modalTitle
            .row
                input#inputId.validate(type='hidden')
                .input-field.col.s12.m6
                    input#inputName.validate(type='text')
                    label(for='inputName') First Name
                .input-field.col.s12.m6
                    input#inputLastName.validate(type='text')
                    label(for='inputLastName') Last Name
                .input-field.col.s12.m6
                    input#inputBirthday.datepicker(type='text')
                    label(for='inputBirthday') Birthday
        .modal-footer
            a.modal-close.waves-effect.waves-red.btn-flat(href='#!') Cancel
            a#modalSubmit.waves-effect.waves-green.btn-flat(href='#!')
            
block scripts
    script.
        var socket = io("/person");
        var newButton = document.getElementById('newButton');
        var updateButtons = document.getElementsByClassName("update");
        var removeButtons = document.getElementsByClassName("remove");
        var modal = M.Modal.getInstance(document.getElementById('modal'));
        var modalTitle = document.getElementById('modalTitle');
        var modalSumbit = document.getElementById('modalSubmit');
        var inputId = document.getElementById('inputId');
        var inputName = document.getElementById('inputName');
        var inputLastName = document.getElementById('inputLastName');
        var inputBirthday = document.getElementById('inputBirthday');
        var table = document.getElementById("table");
        var picker = M.Datepicker.getInstance(inputBirthday);
        var editing = false;

        newButton.addEventListener('click', () => {
            modalTitle.innerHTML = 'New person';
            modalSumbit.innerHTML = 'Create';
            inputId.value = '';
            inputName.value = '';
            inputLastName.value = '';
            inputBirthday.value = '';
            editing = false;
            modal.open();
        });

        inputBirthday.addEventListener('focus', () => {
            picker.open();
        });

        modalSumbit.addEventListener('click', () => {
            if (editing){
                socket.emit('update', getForm());
            }else{
                socket.emit('insert', getForm());
            }
            modal.close();
        });

        for(i=0;i<removeButtons.length;i++){
            addRemoveListener(removeButtons[i]);
        }

        function addRemoveListener(ele){
            ele.addEventListener('click', () => {
                socket.emit('remove', {
                    id : ele.dataset.id
                });
            });
        }

        for(i=0;i<updateButtons.length;i++){
            addUpdateListener(updateButtons[i]);
        }

        function addUpdateListener(ele){
            var data = JSON.parse(ele.dataset.object);
            ele.addEventListener('click', () => {
                modalTitle.innerHTML = 'Update person';
                modalSumbit.innerHTML = 'Update';
                inputId.value = data._id;
                inputName.value = data.name;
                inputLastName.value =  data.lastName;
                inputBirthday.value =  data.birthday;
                M.updateTextFields();
                editing = true;
                modal.open();
            });
        }

        function getForm(){
            var birthdayTokens = inputBirthday.value.split("/");
            return {
                id : inputId.value,
                name : inputName.value,
                lastName : inputLastName.value,
                birthday : new Date(birthdayTokens[2], parseInt(birthdayTokens[1]) - 1, birthdayTokens[0])
            }
        }

        socket.on('inserted', (object) => {
            table.insertAdjacentHTML('beforeend', object.html);
            addUpdateListener(document.getElementById(`uptadeButton-${object.id}`))
            addRemoveListener(document.getElementById(`removeButton-${object.id}`))
        });

        socket.on('updated', (object) => {
            document.getElementById(`row-${object.id}`).outerHTML = object.html;
            addUpdateListener(document.getElementById(`uptadeButton-${object.id}`))
            addRemoveListener(document.getElementById(`removeButton-${object.id}`))
        });

        socket.on('removed', (object) => {
            var elem = document.getElementById(`row-${object.id}`);
            elem.parentNode.removeChild(elem);
        });